// scss-docs-start utilities-colors
$utilities-colors: $theme-colors-rgb !default;
// scss-docs-end utilities-colors

// scss-docs-start utilities-text-colors
$utilities-text: map-merge(
  $utilities-colors,
  (
    "black": to-rgb($black),
    "white": to-rgb($white),
    "body": to-rgb($body-color)
  )
) !default;
$utilities-text-colors: map-loop($utilities-text, rgba-css-var, "$key", "text") !default;
// scss-docs-end utilities-text-colors

// scss-docs-start utilities-bg-colors
$utilities-bg: map-merge(
  $utilities-colors,
  (
    "black": to-rgb($black),
    "white": to-rgb($white),
    "body": to-rgb($body-bg)
  )
) !default;
$utilities-bg-colors: map-loop($utilities-bg, rgba-css-var, "$key", "bg") !default;
// scss-docs-end utilities-bg-colors

// scss-docs-start utilities-border-colors
$utilities-border: map-merge(
  $utilities-colors,
  (
    "white": to-rgb($white)
  )
) !default;
$utilities-border-colors: map-loop($utilities-border, rgba-css-var, "$key", "border") !default;

$utilities: (
  "float": (
    class: fl,
    values: left right none,
  ),
  "overflow": (
    class: o,
    values: auto hidden visible scroll,
  ),
  "display": (
    class: d,
    values: inline inline-block block grid table table-row table-cell flex inline-flex none,
  ),
  "flex": (
    class: f,
    values: (fill: 1 1 auto)
  ),
  "flex-direction": (
    class: fd,
    values: row column row-reverse column-reverse,
  ),
  "flex-grow": (
    class: fg,
    values: (
      0: 0,
      1: 1
    )
  ),
  "flex-shrink": (
    class: fs,
    values: (
      0: 0,
      1: 1
    )
  ),
  "flex-wrap": (
    class: fw,
    values: wrap nowrap wrap-reverse
  ),
  "justify-content": (
    class: jc,
    values: map-merge($flex-values, (between: space-between, around: space-around, evenly: space-evenly)),
  ),
  "align-item": (
    class: ai,
    values: map-merge($flex-values, (between: space-between, around: space-around, stretch: stretch)),
  ),
  "align-self": (
    class: as,
    values: map-merge($flex-values, (auto: auto, baseline: baseline, stretch: stretch)),
  ),
  "gap": (
    class: g,
    values: $spacers
  ),
  "position": (
    class: p,
    values: static relative absolute fixed sticky
  ),
  "top": (
    class: top,
    values: $position-values
  ),
  "bottom": (
    class: bottom,
    values: $position-values
  ),
  "left": (
    class: left,
    values: $position-values
  ),
  "right": (
    class: right,
    values: $position-values
  ),
  "transform": (
    class: t,
    values: (
      xy: translate(-50%, -50%),
      x: translateX(-50%),
      y: translateY(-50%)
    )
  ),

  "width": (
    class: w,
    values: map-merge($wdith-height-values, (100vw: 100vw))
  ),
  "max-width": (
    class: mw,
    values: (100: 100%)
  ),
  "height": (
    class: h,
    values: map-merge($wdith-height-values, (100vh: 100vh))
  ),
  "max-height": (
    class: mh,
    values: (100: 100%)
  ),
  "margin": (
    class: m,
    values: map-merge($spacers, (auto: auto))
  ),
  "margin-x": (
    property: margin-right margin-left,
    class: mx,
    values: map-merge($spacers, (auto: auto))
  ),
  "margin-y": (
    responsive: true,
    property: margin-top margin-bottom,
    class: my,
    values: map-merge($spacers, (auto: auto))
  ),
  "margin-top": (
    class: mt,
    values: map-merge($spacers, (auto: auto))
  ),
  "margin-right": (
    class: mr,
    values: map-merge($spacers, (auto: auto))
  ),
  "margin-bottom": (
    class: mb,
    values: map-merge($spacers, (auto: auto))
  ),
  "margin-left": (
    class: ml,
    values: map-merge($spacers, (auto: auto))
  ),
  "negative-margin": (
    property: margin,
    class: m,
    values: $negative-spacers
  ),
  "negative-margin-x": (
    property: margin-right margin-left,
    class: mx,
    values: $negative-spacers
  ),
  "negative-margin-y": (
    property: margin-top margin-bottom,
    class: my,
    values: $negative-spacers
  ),
  "negative-margin-top": (
    property: margin-top,
    class: mt,
    values: $negative-spacers
  ),
  "negative-margin-right": (
    property: margin-right,
    class: mr,
    values: $negative-spacers
  ),
  "negative-margin-bottom": (
    property: margin-bottom,
    class: mb,
    values: $negative-spacers
  ),
  "negative-margin-left": (
    responsive: true,
    property: margin-left,
    class: ml,
    values: $negative-spacers
  ),
  "padding": (
    property: padding,
    class: p,
    values: $spacers
  ),
  "padding-x": (
    property: padding-right padding-left,
    class: px,
    values: $spacers
  ),
  "padding-y": (
    property: padding-top padding-bottom,
    class: py,
    values: $spacers
  ),
  "padding-top": (
    property: padding-top,
    class: pt,
    values: $spacers
  ),
  "padding-right": (
    property: padding-right,
    class: pr,
    values: $spacers
  ),
  "padding-bottom": (
    property: padding-bottom,
    class: pb,
    values: $spacers
  ),
  "padding-left": (
    property: padding-left,
    class: pl,
    values: $spacers
  ),
  "border": (
    class: bd,
    values: (
      null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
      0: 0
    ),
  ),
  "border-top": (
    class: bdt,
    values: (
      null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
      0: 0
    ),
  ),
  "border-bottom": (
    class: bdb,
    values: (
      null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
      0: 0
    ),
  ),
  "border-left": (
    class: bdl,
    values: (
      null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
      0: 0
    ),
  ),
  "border-right": (
    class: br,
    values: (
      null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
      0: 0
    ),
  ),
  "border-color": (
    class: bdc,
    local-vars: (
      "border-opacity": 1
    ),
    values: $utilities-border-colors
  ),
  "border-width": (
    css-var: true,
    class: bdw,
    values: $border-widths
  ),
  "border-opacity": (
    css-var: true,
    class: bdo,
    values: (
      10: .1,
      25: .25,
      50: .5,
      75: .75,
      100: 1
    )
  ),
  "border-radius": (
    class: bd-r,
    values: (
      none: 0,
      sm: $spacer * .4,
      md: $spacer * .8,
      lg: $spacer * 1.2,
      xl: $spacer * 1.6,
      circle: 50%,
    )
  ),
  "box-shadow": (
    class: bxs,
    values: (
      sm: 0 .125rem .25rem rgba(#000, .15),
      lg: 0 1rem 3rem rgba(#000, .15),
      none: none
    )
  ),
  "color": (
    class: c,
    local-vars: (
      "text-opacity": 1
    ),
    values: map-merge(
      $utilities-text-colors,
      (
        "muted": $gray-600,
        "reset": inherit,
      )
    )
  ),
  "background-color": (
    class: bc,
    local-vars: (
      "bg-opacity": 1
    ),
    values: map-merge(
      $utilities-bg-colors,
      (
        "transparent": transparent,
      )
    )
  ),
  "opacity": (
    class: o,
    values: (0: 0, 25: .25, 50: .5, 75: .75, 100: 1)
  ),
  "text-opacity": (
    css-var: true,
    class: to,
    values: (
      25: .25,
      50: .5,
      75: .75,
      100: 1
    )
  ),
  "font-size": (
    class: fs,
    values: $font-sizes
  ),
  "font-style": (
    class: fs,
    values: italic normal
  ),
  "font-weight": (
    class: fw,
    values: (
      light: 300,
      normal: 400,
      bold: 700
    )
  ),
  "line-height": (
    class: lh,
    values: (
      1: 1,
    )
  ),
  "text-align": (
    class: ta,
    values: left right center
  ),
  "text-decoration": (
    class: td,
    values: none underline line-through
  ),
  "text-transform": (
    class: tt,
    values: lowercase uppercase capitalize
  ),
  "vertical-align": (
    class: va,
    values: baseline top middle bottom text-bottom text-top,
  ),
  "white-space": (
    class: ws,
    values: (
      wrap: normal,
      nowrap: nowrap,
    )
  ),
  "word-wrap": (
    property: word-wrap word-break,
    class: ww,
    values: (break: break-word),
  ),
  "visibility": (
    class: v,
    values: (
      visible: visible,
      invisible: hidden,
    )
  ),
  "gradient": (
    property: background-image,
    class: bg,
    values: (gradient: $gradient)
  ),
  "user-select": (
    class: us,
    values: all auto none
  ),
  "pointer-events": (
    class: pe,
    values: none auto,
  ),
  "fade": (
    property: transition,
    values: (null: opacity .15s linear)
  )
);

@each $key, $utility in $utilities {
  $values: map-get($utility, values);
  $class-name: if(map-has-key($utility, class), map-get($utility, class), $key);
  $properties: if(map-has-key($utility, property), map-get($utility, property), $key);
  $is-css-var: map-get($utility, css-var);
  $is-local-vars: map-get($utility, local-vars);

  @if type-of($properties) == "string" {
    $properties: append((), $properties);
  }

  @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
    $values: zip($values, $values);
  }

  @each $key, $value in $values {
    $property-class: if($key == null, $class-name, $class-name + "-" + $key);

    @if $is-css-var {
      .#{$property-class} {
        --#{$prefix}#{$properties}: #{$value};
      }
    } @else {
      .#{$property-class} {
        @each $property in $properties {
          @if $is-local-vars {
            @each $local-var, $variable in $is-local-vars {
              --#{$prefix}#{$local-var}: #{$variable};
            }
          }
          #{$property}: $value !important;
        }
      }
    }
  }
}
